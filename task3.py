'''
3. Создайте собственный класс-исключение, который должен проверять содержимое
    списка на наличие только чисел. Проверить работу исключения
    на реальном примере. Необходимо запрашивать у пользователя данные
    и заполнять список. Класс-исключение должен контролировать типы данных
    элементов списка. Примечание: длина списка не фиксирована.
    Элементы запрашиваются бесконечно, пока пользователь сам не остановит
    работу скрипта, введя, например, “stop”. При этом скрипт завершается,
    сформированный список выводится на экран.
    Подсказка: для данного задания примем, что пользователь может вводить
    только числа и строки. При вводе пользователем очередного элемента
    необходимо реализовать проверку типа элемента и вносить его в список,
    только если введено число. Класс-исключение должен не позволить
    пользователю ввести текст (не число) и отобразить соответствующее
    сообщение. При этом работа скрипта не должна завершаться.
'''


class CipherCheck(ValueError):
    def __init__(self, ofcorrecttype):
        super().__init__(ofcorrecttype)

    @classmethod
    def check(cls, cipher_str):
        try:
            return float(cipher_str)
        except ValueError:
            raise cls('Строка не является числом')


if __name__ == "__main__":
    numbers_list = []
    txt = (
        'Введите числа через Enter, а я добавлю их в список. '
        'Для завершение введите пустую строку.'
    )
    print(txt)
    while True:
        user_input = input()
        if len(user_input):
            try:
                numbers_list.append(CipherCheck.check(user_input.strip()))
            except CipherCheck as e:
                print(e)
        else:
            break

    num_list_str = ', '.join(map(lambda x: f'{x:n}', numbers_list))
    print(f"Введены числа: {num_list_str}")
