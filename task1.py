'''
1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора
    класса (метод __init__()), который должен принимать данные (список списков)
    для формирования матрицы.
    Подсказка: матрица — система некоторых математических величин,
    расположенных в виде прямоугольной схемы.
    Примеры матриц вы найдете в методичке.
    Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы
    в привычном виде.
    Далее реализовать перегрузку метода __add__() для реализации операции
    сложения двух объектов класса Matrix (двух матриц).
    Результатом сложения должна быть новая матрица.
    Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент
    первой строки первой матрицы складываем с первым элементом первой строки
    второй матрицы и т.д.
'''
from itertools import zip_longest


class Matrix:
    def __init__(self, matrix: list):
        self.__matrix = matrix

    def __str__(self):
        return '\n'.join(
            [
                '\t'.join([str(col) for col in row])
                for row in self.__matrix
            ]
        )

    def __add__(self, other):
        tmp_gen = zip_longest(self.__matrix, other.__matrix, fillvalue=[0])
        return Matrix(
            [
                map(sum, zip_longest(el1, el2, fillvalue=0))
                for el1, el2 in tmp_gen
            ]
        )


if __name__ == '__main__':
    lst1 = [[1, 2, 3], [1, 2, 3], [1, 2, 3]]
    lst2 = [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]

    m1 = Matrix(lst1)
    m2 = Matrix(lst1)
    m3 = Matrix(lst2)
    print(f'Матрица m1 =\n{m1}')
    print(f'Матрица m2 =\n{m2}')
    print(f'Матрица m3 =\n{m3}')

    print(f'Семма матриц m1 + m2 =\n{m1 + m2}')
    print(f'Семма матриц m1 + m3 =\n{m1 + m3}')
